# Generated by Django 3.2 on 2022-10-13 03:03

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CategoryClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='Класс')),
            ],
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Предметь')),
            ],
        ),
        migrations.CreateModel(
            name='OrganizeStudy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=255, verbose_name='При организации изучения учебного материала учитель обеспечивает* и реализует')),
            ],
        ),
        migrations.CreateModel(
            name='Resources',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=255, verbose_name='ресурсы')),
            ],
        ),
        migrations.CreateModel(
            name='Teaching',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_type', models.CharField(choices=[('Комплексное наблюдение урока', 'Комплексное наблюдение урока'), ('Планирование урока', 'Планирование урока'), ('Преподавание', 'Преподавание'), ('Оценивание учебных достижений учащихся', 'Оценивание учебных достижений учащихся')], default='Комлексное наблюдение урока', max_length=255, verbose_name='Тип оценивание')),
                ('date_of_observ', models.DateTimeField(auto_now_add=True, verbose_name='Дата наблюдения урока')),
                ('lesson_title', models.CharField(max_length=255, verbose_name='Тема урока')),
                ('goal_prof_develop', models.CharField(max_length=255, verbose_name='Цель профессионального развития на учебный год')),
                ('plan', models.CharField(choices=[('самостоятельно разработанного урока', 'самостоятельно разработанного урока'), ('совместно разработанного с коллегами урока в рамках исследования урока', 'совместно разработанного с коллегами урока в рамках исследования урока'), ('урока в рамках исследования практики', 'урока в рамках исследования практики'), ('урока по авторской программе', 'урока по авторской программе'), ('урока по авторской методике', 'урока по авторской методике')], default='самостоятельно разработанного урока', max_length=255, verbose_name='Учителем предоставлен')),
                ('teacher_discus', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель обсуждает с учащимися цели обучения и ожидаемые результаты урока')),
                ('teacher_follows', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель соблюдает структуру урока в соответствии с планом (при необходимости корректирует план урока, не нарушая логической последовательности этапов урока)')),
                ('teaching_techn_coll', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель использует приемы обучения, направленные на поддержку учебного сотрудничества')),
                ('brief_feedback_observe', models.TextField(verbose_name='Краткий отзыв о наблюдении урока')),
                ('brief_feedback', models.TextField(verbose_name='Краткий отзыв о продвижении учителя к достижению цели профессионального развития на учебный год')),
                ('categoryclass', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.categoryclass', verbose_name='Класс')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.lesson', verbose_name='Предмет')),
                ('observer', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Наблюдатель')),
                ('organizestudy', models.ManyToManyField(to='main.OrganizeStudy', verbose_name='При организации изучения учебного материала учитель обеспечивает* и реализует')),
                ('resources', models.ManyToManyField(to='main.Resources', verbose_name='Учитель использует ресурсы, направленные на:')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Выберите учителя')),
            ],
        ),
        migrations.CreateModel(
            name='PlanningLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_type', models.CharField(choices=[('Комплексное наблюдение урока', 'Комплексное наблюдение урока'), ('Планирование урока', 'Планирование урока'), ('Преподавание', 'Преподавание'), ('Оценивание учебных достижений учащихся', 'Оценивание учебных достижений учащихся')], default='Комлексное наблюдение урока', max_length=255, verbose_name='Тип оценивание')),
                ('date_of_observ', models.DateTimeField(auto_now_add=True, verbose_name='Дата наблюдения урока')),
                ('lesson_title', models.CharField(max_length=255, verbose_name='Тема урока')),
                ('goal_prof_develop', models.CharField(max_length=255, verbose_name='Цель профессионального развития на учебный год')),
                ('plan', models.CharField(choices=[('самостоятельно разработанного урока', 'самостоятельно разработанного урока'), ('совместно разработанного с коллегами урока в рамках исследования урока', 'совместно разработанного с коллегами урока в рамках исследования урока'), ('урока в рамках исследования практики', 'урока в рамках исследования практики'), ('урока по авторской программе', 'урока по авторской программе'), ('урока по авторской методике', 'урока по авторской методике')], default='самостоятельно разработанного урока', max_length=255, verbose_name='Учителем предоставлен')),
                ('plan_contains', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='План содержит понятные для учащихся ожидаемые результаты урока и критерии успеха')),
                ('plan_lern_methods', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Планируемые приемы обучения соотносятся с целями обучения и ожидаемыми результатами*')),
                ('plan_resourсes', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Планируемые ресурсы направлены на достижение целей обучения')),
                ('plan_strategy', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Планируемые стратегии оценивания учебных достижений учащихся направлены на достижение целей обучения')),
                ('brief_feedback_observe', models.TextField(verbose_name='Краткий отзыв о наблюдении урока')),
                ('brief_feedback', models.TextField(verbose_name='Краткий отзыв о продвижении учителя к достижению цели профессионального развития на учебный год')),
                ('categoryclass', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.categoryclass', verbose_name='Класс')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.lesson', verbose_name='Предмет')),
                ('observer', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Наблюдатель')),
                ('organizestudy', models.ManyToManyField(to='main.OrganizeStudy', verbose_name='Учебный материал отражает')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Выберите учителя')),
            ],
        ),
        migrations.CreateModel(
            name='ComprehensiveControl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_type', models.CharField(choices=[('Комплексное наблюдение урока', 'Комплексное наблюдение урока'), ('Планирование урока', 'Планирование урока'), ('Преподавание', 'Преподавание'), ('Оценивание учебных достижений учащихся', 'Оценивание учебных достижений учащихся')], default='Комлексное наблюдение урока', max_length=255, verbose_name='Тип оценивание')),
                ('lesson_title', models.CharField(max_length=255, verbose_name='Тема урока')),
                ('date_of_observ', models.DateTimeField(auto_now_add=True, verbose_name='Дата наблюдения урока')),
                ('goal_prof_develop', models.CharField(max_length=255, verbose_name='Цель профессионального развития на учебный год')),
                ('plan', models.CharField(choices=[('самостоятельно разработанного урока', 'самостоятельно разработанного урока'), ('совместно разработанного с коллегами урока в рамках исследования урока', 'совместно разработанного с коллегами урока в рамках исследования урока'), ('урока в рамках исследования практики', 'урока в рамках исследования практики'), ('урока по авторской программе', 'урока по авторской программе'), ('урока по авторской методике', 'урока по авторской методике')], default='самостоятельно разработанного урока', max_length=255, verbose_name='Предаставлен план')),
                ('lern_obj', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Цели обучения соответствуют месту и роли урока в структуре раздела, темы')),
                ('teacher_discus', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель обсуждает с учащимися цели обучения и ожидаемые результаты урока')),
                ('teacher_follows', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель соблюдает структуру урока в соответствии с планом (при необходимости корректирует план урока, не нарушая логической последовательности этапов урока)')),
                ('teaching_techniques', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель использует приемы обучения, способствующие достижению целей обучения')),
                ('teacher_monitors', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель отслеживает вовлеченность каждого учащегося')),
                ('teacher_offers', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель предлагает учащимся критерии и дескрипторы оценивания в соответствии с целями обучения')),
                ('teacher_support', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель поддерживает обучение учащихся соответствующими приемами формативного оценивания')),
                ('teacher_provide', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель предоставляет конструктивную обратную связь учащимся')),
                ('teacher_uses', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель использует результаты формативного оценивания для планирования уроков')),
                ('brief_feedback_observe', models.TextField(verbose_name='Краткий отзыв о наблюдении урока')),
                ('brief_feedback', models.TextField(verbose_name='Краткий отзыв о продвижении учителя к достижению цели профессионального развития на учебный год')),
                ('categoryclass', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.categoryclass', verbose_name='Класс')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.lesson', verbose_name='Предмет')),
                ('observer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Наблюдатель')),
                ('organizestudy', models.ManyToManyField(to='main.OrganizeStudy', verbose_name='При организации изучения учебного материала учитель обеспечивает* и реализует')),
                ('resources', models.ManyToManyField(to='main.Resources', verbose_name='Учитель использует ресурсы, направленные на:')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Выберите учителя')),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentStudentLearning',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_type', models.CharField(choices=[('Комплексное наблюдение урока', 'Комплексное наблюдение урока'), ('Планирование урока', 'Планирование урока'), ('Преподавание', 'Преподавание'), ('Оценивание учебных достижений учащихся', 'Оценивание учебных достижений учащихся')], default='Комлексное наблюдение урока', max_length=255, verbose_name='Тип оценивание')),
                ('date_of_observ', models.DateTimeField(auto_now_add=True, verbose_name='Дата наблюдения урока')),
                ('lesson_title', models.CharField(max_length=255, verbose_name='Тема урока')),
                ('goal_prof_develop', models.CharField(max_length=255, verbose_name='Цель профессионального развития на учебный год')),
                ('teacher_observe', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель отслеживает вовлеченность каждого учащегося')),
                ('teacher_offers', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель предлагает учащимся критерии и дескрипторы оценивания в соответствии с целями обучения')),
                ('teacher_support', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель поддерживает обучение учащихся соответствующими приемами формативного оценивания')),
                ('teacher_provides', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель предоставляет конструктивную обратную связь учащимся')),
                ('teacher_uses', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель использует результаты формативного оценивания для планирования уроков')),
                ('brief_feedback_observe', models.TextField(verbose_name='Краткий отзыв о наблюдении урока')),
                ('brief_feedback', models.TextField(verbose_name='Краткий отзыв о продвижении учителя к достижению цели профессионального развития на учебный год')),
                ('categoryclass', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.categoryclass', verbose_name='Класс')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.lesson', verbose_name='Предмет')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Выберите учителя')),
            ],
        ),
        migrations.AddField(
            model_name='customuser',
            name='lesson',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.lesson', verbose_name='+'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
